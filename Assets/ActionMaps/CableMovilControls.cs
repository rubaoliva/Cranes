//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/ActionMaps/CableMovilControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CableMovilControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CableMovilControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CableMovilControls"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""e428fb88-1769-4a61-a4f1-54b5941a71b2"",
            ""actions"": [
                {
                    ""name"": ""MoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""4093c282-5436-4ce2-b990-fc06dde5a851"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveFront"",
                    ""type"": ""Button"",
                    ""id"": ""05020b44-f5bb-47f8-9762-89fa09fc493e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""8cf44c8d-93a7-4c17-bf77-86698ab6b888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""af551cfb-1d35-4443-a108-93588a39454c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0258daf-be6b-4e8e-9600-be7f5026fccf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c35124d-a803-427f-9f23-551520fda895"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a4e31c7-8d50-4532-84e4-453861ad2ca2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8bd17f9-c742-4d36-aa6c-5cd1b0d42ef6"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1746aa0e-ef5d-4619-9a94-338c83bd7aaf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47a4e00-19e2-4edd-b1a6-db3b1263f099"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c109533-3f38-4b9d-9cb1-c8aed165eb0a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d81d89b7-ee5e-4b34-bd0c-a88e8758a66e"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Land
        m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
        m_Land_MoveBack = m_Land.FindAction("MoveBack", throwIfNotFound: true);
        m_Land_MoveFront = m_Land.FindAction("MoveFront", throwIfNotFound: true);
        m_Land_MoveUp = m_Land.FindAction("MoveUp", throwIfNotFound: true);
        m_Land_MoveDown = m_Land.FindAction("MoveDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Land
    private readonly InputActionMap m_Land;
    private ILandActions m_LandActionsCallbackInterface;
    private readonly InputAction m_Land_MoveBack;
    private readonly InputAction m_Land_MoveFront;
    private readonly InputAction m_Land_MoveUp;
    private readonly InputAction m_Land_MoveDown;
    public struct LandActions
    {
        private @CableMovilControls m_Wrapper;
        public LandActions(@CableMovilControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBack => m_Wrapper.m_Land_MoveBack;
        public InputAction @MoveFront => m_Wrapper.m_Land_MoveFront;
        public InputAction @MoveUp => m_Wrapper.m_Land_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Land_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
        public void SetCallbacks(ILandActions instance)
        {
            if (m_Wrapper.m_LandActionsCallbackInterface != null)
            {
                @MoveBack.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveBack;
                @MoveBack.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveBack;
                @MoveBack.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveBack;
                @MoveFront.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveFront;
                @MoveFront.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveFront;
                @MoveFront.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveFront;
                @MoveUp.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMoveDown;
            }
            m_Wrapper.m_LandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveBack.started += instance.OnMoveBack;
                @MoveBack.performed += instance.OnMoveBack;
                @MoveBack.canceled += instance.OnMoveBack;
                @MoveFront.started += instance.OnMoveFront;
                @MoveFront.performed += instance.OnMoveFront;
                @MoveFront.canceled += instance.OnMoveFront;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
            }
        }
    }
    public LandActions @Land => new LandActions(this);
    public interface ILandActions
    {
        void OnMoveBack(InputAction.CallbackContext context);
        void OnMoveFront(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
}
